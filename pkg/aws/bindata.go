// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5d\x4d\x6f\xe3\xc8\x0e\xbc\xe7\x57\x18\x3e\x4f\x04\x77\xab\x25\xdb\xb9\xbe\x3f\xf0\x2e\xef\xf4\xb0\x18\x68\x1d\x47\x31\x10\x79\x82\xb6\x33\x98\x99\xc5\xfc\xf7\x85\x92\xf9\x00\xd2\xed\xdd\xea\x22\x69\xd9\xc7\x1d\x64\x45\x5a\xcd\x2a\x91\x54\x91\xfa\xff\xcd\x6c\xf6\xd7\xcd\x6c\x36\x9b\xcd\x77\xfb\xc3\xb1\xdb\x6f\xb6\x1f\x8f\x5f\x9f\xb7\xf3\xbb\xd9\xbc\x73\x95\xff\xf2\xd4\xc5\x7e\x3b\xff\xf0\xf6\x27\x9f\xff\xf3\xdf\xff\xcd\xef\x66\xab\x1f\xff\x39\x6c\x87\x4f\xf1\xeb\xfc\x6e\xe6\xda\x1f\xff\x72\x38\x7e\x8a\x5d\x3f\xfe\xdf\xfb\x97\xa7\xa7\x9b\xd9\xec\xfb\x87\x7f\x36\x10\xb2\x06\x7e\x5d\xef\x97\x85\xda\xb3\x16\x72\xd7\xf7\xef\x2f\x1f\xd8\xab\x0f\xdb\xfb\xdd\xcb\xf0\xde\xfd\xf7\x97\xa7\x9d\x1f\xb6\xc7\xee\xc9\xf0\xe6\x64\xef\x7e\x78\x7f\xfd\x15\x75\xf9\xcd\x89\xbb\x93\xdc\x7c\x57\x2d\x13\x03\x6f\x17\x9d\xcd\xe6\xf7\xdb\xcf\xbb\xcd\xf6\xf0\xfb\xae\x8e\x7f\xb6\xfb\x36\xfe\x4d\xdd\x2c\x7e\xfd\xd3\xfe\xf3\xb0\xfd\x78\x38\xdc\xcf\xef\x66\x0f\xdd\xd3\x61\xfb\xfa\xef\xdf\x01\x17\xb1\x00\x87\x1c\x0c\xef\x1d\x0c\x5e\xec\x60\x0d\x43\xb0\x41\x5c\xf4\xef\x5d\x5c\x29\x78\x08\x63\x78\x41\xb9\xe8\x5a\x05\x1f\x57\x59\x1f\xeb\x24\x16\x5b\xce\xc7\x5a\xe3\xa4\x21\xa6\xaa\xab\x25\x77\xd2\x3f\xcf\x43\xe2\x21\x46\x17\xcb\x8a\xf3\x30\x88\xef\x61\x10\xa0\x05\xa2\xb4\x20\x09\x76\xd0\xc2\x89\x50\x4d\x2c\x64\x42\x15\xb4\xc0\x07\x1a\x68\x80\x8f\x13\xc8\x40\x53\xb9\xfc\x39\x87\xe4\xa0\xd7\x5c\x66\x32\x9a\xc8\x9f\xc3\x32\x7d\x7c\x05\x2e\x7b\xd8\x34\x95\xcf\x47\xd3\x3a\x39\x6b\xb7\xe6\x1e\xf1\xa3\x0d\xd3\x14\x6e\xd3\x58\xa7\x70\x9b\xa6\x5a\x83\x88\x58\xd2\x16\x0c\x93\xc4\x4d\x93\xcd\xe2\x54\xcf\xd8\x34\x8d\x6b\xba\x33\xc0\xad\xab\x5c\x9b\xb5\xd1\x26\x3f\xc3\x79\xfe\x87\x9c\x01\x70\x9d\x39\xe2\x3a\x7b\xc8\x75\x78\xc2\xc4\xa2\xa2\xb3\x05\x5d\x67\x0d\x8a\x7b\x11\x2a\x90\x7c\x68\xbd\xc8\x26\x44\xc7\xf8\x82\xe6\x43\xaf\x5e\x4a\x70\x05\x25\x96\x5e\xc5\x4f\x11\x34\x21\x3f\x75\xee\x27\x8f\x6e\xa8\xa6\x55\xf1\x51\xc0\x0f\x50\xb5\xa3\xe2\xa4\x80\x61\x10\x27\x5b\x15\x27\x49\x8e\x42\x8e\xfa\x67\x7a\x2d\xf2\x8f\x25\x39\xc4\x41\x97\xef\xaf\x94\x78\x78\x15\x24\x79\x2f\xcb\xf5\xcf\xe6\xa5\x36\x43\x26\xfd\x2a\x1d\x2f\x4d\xf9\x51\xe1\x59\xa3\x4d\x8f\x89\x8f\x41\xc3\x47\x41\xcd\x83\xf8\xa8\x72\xd4\x86\xe4\xa8\x41\x3d\x7c\xd9\x75\x36\xb0\x98\xd2\xb7\xdc\xc1\x7d\x01\x33\xd2\x05\xd3\x1e\xa5\x0c\xef\x68\x0b\x28\xe2\x03\xff\x23\x50\xc0\xd2\x25\xf2\x1e\xc3\x5b\x53\x79\xb6\xad\xb6\xcf\x42\x46\xf7\xac\xb1\x88\x77\x0b\xb6\x37\xd8\xf6\xf6\xdd\x8a\xd1\x86\x79\xb7\xa2\xed\xad\x1b\x09\x6d\x6f\xde\x48\x68\x7b\xf3\x46\x42\xdb\x9b\x36\x12\xda\xde\xf4\x1d\xef\xdb\xf5\x53\xd0\xe9\x06\x92\x69\x2b\xa4\xed\xed\xb3\x7c\x17\xbc\xb4\x5a\x7a\x75\xd3\xbc\x17\x22\xcf\x0a\x46\x3f\x6d\x73\xe8\xb0\x0c\x0a\x3e\x1a\x27\xd1\x6b\x71\x06\x38\x3a\xa9\xdb\x63\x48\x53\x2c\x9d\xe3\x36\xcc\xa3\x9d\x5b\x29\x38\xc8\x32\x20\x94\xe9\xaf\x55\x1c\x64\x29\xf4\x8c\xa8\xb6\x4c\xf6\x7d\xbd\x14\x7a\xb8\xf1\x05\x22\x09\xec\x0d\x7f\x52\x33\xad\xe4\xaf\xf8\xa3\x83\xdd\xf4\x64\xb3\xc6\x89\xc5\x1c\xf7\x1e\xa5\xf0\x36\xad\x69\x32\x2e\xb6\xc9\x71\x2f\xf2\x11\x59\xe6\x23\x4a\xe1\xce\x63\xd0\x4e\xee\xa4\x8e\x9b\xa8\x20\x02\x3d\xef\x24\x2c\x75\xdc\xc4\xe0\x5d\x83\xd8\xa9\x0d\x9c\x7c\x70\x78\x06\xb4\x5e\x42\xc9\x45\xda\x16\xc9\x43\x1c\x27\xa2\x07\x5c\x75\x0a\x86\x65\x9a\xff\xc8\x5d\x44\xa1\x03\xc6\x64\x9a\xfe\x48\x6f\x63\x0f\x53\x10\xa6\x1c\x4c\x3c\x14\xab\xf2\xfa\x92\x07\xce\x44\x44\xde\xd7\x38\x62\xc2\x8a\x2b\xa0\x7a\x5c\x41\x99\x8b\x78\xd0\x84\xe4\xa1\x89\x99\x38\x48\x18\x10\x32\x11\xee\xf7\x78\xa5\x09\xf6\x75\xf5\x3b\xe3\x6f\x6e\xa2\x51\xe3\x1b\xae\x88\xd3\x71\x13\xa4\x08\xb2\x86\xf3\xd2\xa2\xfd\xd5\x47\x14\x1c\x64\x0d\xa7\xe3\x24\x0a\x2f\xb0\x04\x31\x3a\x6e\xec\x8d\x48\xbd\x9a\xe8\x25\xe7\xab\x8f\x60\x83\x98\x43\x8d\x93\x1e\xf6\x63\x41\x0a\x05\x42\x7b\x65\x90\xe9\x3d\xc2\x49\x14\x0b\x6d\x15\x1f\x75\xa1\x6d\x51\x7e\x3c\xe2\xe5\x26\x08\x6d\x8b\xea\xe3\xf1\x70\xca\xcd\x4c\x0e\xe1\xa0\x61\x16\x93\x2a\x69\xa7\x5c\x17\x67\xc6\x59\x14\x5c\x54\x2e\x8b\xd3\x2e\x88\x86\x93\xca\x4d\x90\x84\x84\x54\x9c\xd4\x2d\x89\x13\x12\x52\xf0\x51\x98\xdf\x23\x77\x52\xde\x3d\xdc\xc1\x53\x60\x18\x6c\x0c\xfa\xd8\x3b\x59\x11\x73\x9e\x2e\xec\x4e\x56\x06\x21\xd8\x56\x71\x12\x7a\x1f\xe0\xb2\x2f\xfa\xb1\xfe\x87\x30\x09\xda\xd5\x60\xc3\xbd\x71\xd0\x51\xdb\x40\xc6\x98\x7c\xc4\x2f\xa8\x76\xf5\xb6\xa0\x9c\x05\x93\xf2\x24\x20\x97\x8d\xfc\x56\x6e\xf7\xb8\xf6\x70\xd9\x72\x2c\xa9\xe5\x27\xc8\x93\x64\x42\xa9\xe3\x64\x9d\x67\xca\x04\xe2\xd8\xcb\xf2\x8c\xb0\x58\xc5\xcb\xfc\x73\xd1\xa7\xa5\x18\xa9\xc7\x57\x72\x13\x23\x4b\xba\x5c\xd4\x70\x11\x2b\xbb\x27\x46\x0e\x48\x97\x64\xb9\x28\xf7\x71\xff\xe0\xec\xc7\xb7\xde\xac\x98\xca\xae\x5e\x4d\xa0\xd8\x0a\x5c\x4b\xf9\xd5\x86\xa5\xe8\x67\x00\xf7\x6a\xd0\xa3\xe0\xe2\xce\xfd\x80\xee\xe6\x40\x07\xea\xd3\x34\xca\x29\xf8\x78\x18\xba\xa7\x64\xc1\x47\x12\x69\xe4\x82\x0c\xf9\xe6\x84\x01\x0d\x23\xec\x25\x92\xc1\x86\x8c\xe1\x54\x4b\x21\xa5\xae\x50\x71\xe4\xb5\x12\xef\x19\x19\x4e\x35\x15\xd2\xc4\x64\x55\x71\xa9\x89\x5c\x5a\x31\x9c\xa8\xd7\xd3\x87\xe9\xb2\xe2\xca\x4c\x85\xd3\x86\x2b\x61\x72\xd9\x88\x78\x1f\xca\x00\x96\x6f\x20\x33\xa6\x03\x82\x5e\xee\xa0\x35\x31\xca\x3d\xd4\x24\x1d\xfd\x3d\x23\x43\xa8\xdc\x22\xef\xe2\x22\xcd\x12\xb8\x35\x1d\xa3\x0d\xc9\x8b\x06\xd0\x06\xff\x96\x00\x34\x20\x68\xf1\x83\x16\x20\xb8\x91\x69\x0e\xba\xca\x84\xcc\x05\x87\x82\x4d\x26\x6c\x4a\x3b\xda\x30\x0f\xa4\x82\x55\x26\xb9\x46\x06\x6a\xc3\x36\x58\xf1\x55\x26\x6c\xb0\x36\xa2\x97\x49\xa0\x09\x4b\x3c\xa0\xbb\x4c\x04\x87\x6c\x0c\xb8\x82\x65\x26\x3c\xe2\x0a\xb6\x99\xf0\x90\x2b\xd8\x66\xc2\x1f\x07\xbc\xcd\x84\x06\x1d\xbe\xcd\x84\x46\x1d\xbe\xcd\x84\x87\x1d\xb8\xce\x84\xbf\xbc\x35\x2e\x0a\x86\x78\xd8\x8e\x9f\xb8\xab\x3f\x14\x2d\x34\x01\xf5\x17\x49\x51\x2a\xde\x1c\x31\x14\xed\x33\x61\x3b\xfb\x3a\x77\xd3\x56\x26\x22\xde\x14\x32\x94\xac\x33\x21\xbb\xfa\x3a\x4e\x2a\xcb\x44\xf4\xf7\x99\x0c\xf0\x3e\x13\x4e\xa2\x26\x7d\xab\x38\xe0\xfb\x4c\xd8\x76\xbe\xb4\x9b\x3f\x94\x2c\x34\x99\x90\x25\xaf\x83\x24\xaf\x83\x23\xaf\x80\x22\xaf\x81\x21\xaf\x82\x20\x2f\x9c\x1f\xd1\x95\x26\x93\xa2\xe5\xe2\x19\x5c\x7f\x86\xc0\x84\xc2\xf5\x67\x08\x4c\x38\xbc\x40\x1a\x32\x65\x58\x5a\x8f\x3a\x68\x30\xa4\xf6\xa8\x83\x09\x8d\xab\x8f\x3a\x98\xf0\x38\x28\x0b\x99\x8c\xc8\x25\xa3\x18\x58\x3d\x6f\x3e\x49\x21\x67\x62\x21\x11\x63\xf7\x41\x48\xa3\xa8\x91\x33\xb4\xe2\x24\x14\x86\x5a\x30\x6f\xc5\xc9\xe8\x03\xb5\x61\xda\x8a\xb3\xc7\xae\x00\xba\x90\x81\x92\x1d\x59\x34\xf2\x4a\x96\x64\xd1\xc8\xc3\x97\x64\xb1\xa0\x28\x58\x92\xc5\x82\xa2\x60\x49\x16\x0d\x0a\x74\x4b\x16\x7f\x79\x4c\x54\xc0\xdf\x22\x4c\x71\x2e\x89\x24\x6b\xd0\x9d\xa1\x77\x24\xdf\x93\x35\x14\xed\xc9\x02\x2b\x0f\x83\x59\x8e\xa1\x60\x4f\x16\xbb\xc7\x55\xba\x27\x6b\x28\xd9\x93\x45\x8e\x2f\x8b\xc7\x10\x86\x92\x3d\x59\xec\xf8\xb2\xd2\x79\x1b\x26\xf5\xe2\x45\x59\x03\xbe\x28\x8b\x5c\x89\x2b\x5c\x94\x35\xe0\x8b\xb2\x26\x86\xb5\x69\xe1\x22\xde\x94\xf5\xec\x71\x7e\x5c\x92\x69\xc7\x33\x3e\xe0\xc9\xae\x1d\x79\x46\xc7\x33\x33\x33\x85\xd0\xf5\xcf\xb0\x3a\xe5\x59\x32\x18\x09\x1a\xb0\x5e\x9c\xf2\x5c\x97\xf4\xd0\xc0\x21\x11\xfd\x8e\x64\x34\x9f\x41\x15\x8b\xd5\xa3\xfa\x0c\x6a\x46\x7d\xab\xe0\xa4\xf5\xfe\x3a\x15\x27\x8d\x67\x50\xc5\x32\xe6\x68\x3e\xe0\x29\x96\x82\xc7\x02\x09\x2f\xcb\x80\x11\x96\xf0\x92\x0c\x18\x71\x09\x2f\xbb\x9d\x2a\x9e\xfc\xe6\xa1\x1a\xc9\x46\x50\x26\x9c\x0f\x68\xd0\x82\xf1\xfa\xab\x58\x20\x16\x66\x7b\x4f\xb1\x40\x2c\x9c\x1b\xee\x06\x6d\x88\x1e\x77\xa8\x0d\x7a\x12\x18\x34\x80\xc3\x82\xfe\x0d\x30\x2c\xc8\xae\x47\x04\xd5\xc2\x64\xcf\x23\xa2\x72\x61\xc1\x31\xd3\x63\xab\xd8\xf5\x0b\xe4\xc2\x3c\xe6\x0a\xe4\xc2\x3c\xe8\x0a\xe4\xc2\xfc\x71\xc0\x72\x61\x1a\x76\xb8\x5c\x98\xc7\x1d\xae\x17\xe6\x81\x07\xea\x85\x69\xe4\xa1\x82\x61\x1e\x19\x05\xed\xcc\xc9\x36\xca\xc5\x22\xc1\x30\xb8\xae\x44\x5f\x47\x11\x8b\x04\xc3\x60\x0d\xa8\xaf\xa3\x88\x05\x82\x61\xb2\x9d\x29\x96\x28\xc4\x12\xc1\x30\x2b\x51\xd0\xf1\x52\x42\x32\x67\x11\x52\x44\x58\x31\x4c\xf6\xe2\xa4\x4a\x8a\x88\x4b\x86\xc9\x77\x00\x62\x99\x43\x2c\x91\x0c\x4f\xc8\x93\xd7\x41\x93\xd7\xc1\x92\x57\x40\x92\x57\xc1\x91\x57\x41\x91\x97\xce\x90\xa8\x68\x78\x52\xbc\x5c\x3c\x87\xeb\x6f\x6a\x33\x21\xf1\x02\xb5\xdb\x94\x2c\xae\xff\xc2\xc3\x24\x2c\x95\xd7\xc9\x99\xf0\x38\xae\xd9\x9b\x92\xc8\x71\xd9\xdf\x94\x4c\x6e\xbb\x4c\x4e\x81\xca\x25\xab\xe4\xb0\xaa\x1e\x96\x0d\x4f\xc7\xc5\x42\x2a\xc6\xee\x83\x90\x48\x51\x23\x67\x68\xc9\x49\x48\x0c\xb5\x60\xdf\x92\x93\x11\x08\x6a\xc3\xb6\x25\x67\x8f\x5e\x01\x78\x21\x03\x25\xc2\x61\x1a\x7b\x25\xc2\x61\x1a\x7b\xb8\x70\x98\x85\x45\x81\x70\x98\x86\x45\x81\x72\x98\x86\x05\xaa\x1c\x66\x61\x01\x4b\x87\xf9\x7b\xc4\x2f\xab\x46\x2d\x58\xc3\xee\x0c\x3d\x24\xb9\x74\x38\x16\x49\x87\xc1\xfa\xc3\x40\x63\x18\x0b\xa4\xc3\x64\x66\x2f\x96\x0e\xc7\x12\xe9\x30\xfd\x51\x21\x71\x32\x56\xa2\x1d\x66\xbf\x74\xa5\x74\xe0\x96\xa9\xbd\x58\x3c\x1c\x71\xf1\x30\x77\xd4\x52\xf1\x70\xc4\xc5\xc3\x13\x03\xdb\xb4\x7c\x11\x8b\x87\x8f\xae\x1a\x76\x9b\xf8\xe9\xdf\x4e\x79\x51\xb5\xae\xa6\x9e\x16\x47\xf8\x1b\x3b\xe4\xe3\xe8\xe8\x2d\x47\x89\x8e\x3e\x8f\x83\x54\xf7\x4c\x5f\x1e\xb9\xff\x9c\x58\xee\xe8\xab\x7d\xb7\x07\x0e\x97\x53\x80\x1d\x3d\xb6\x2f\x9a\x3e\x57\xd3\x09\xa8\x23\xbe\xbb\x97\xfc\x01\xa0\x6a\x95\x0c\xcc\x13\x7b\x73\xb5\x02\xb3\xce\x06\x66\xfa\x84\x62\xaf\x9e\x09\xcc\xe4\xe2\x74\x60\xd6\xd9\xc0\x4c\x53\x00\xf6\xea\xc6\x81\x69\xbd\xe5\x70\xb4\x60\x1a\x9a\x9d\x71\x6c\x76\xb6\xc1\xd9\x19\x47\x67\x67\x1b\x9e\xc6\xcb\x19\x8f\xc1\x7a\xca\x79\xb4\x60\x19\x9f\xe1\x44\x8d\xaf\x15\x9f\xe3\xf5\x0d\xe3\x33\xf4\xb6\xf1\x19\x7a\xd3\xf8\x0c\xc6\xa3\xcd\x2f\xb7\xce\x1f\xff\x74\xd9\xf2\x20\x64\x66\x9b\xbd\x27\x87\x1d\x5e\x6e\xdd\xaa\xc4\xd0\x2a\x90\x78\x78\xb9\xf5\xa1\xc0\x90\x0f\x4d\xe6\x6b\xf9\x98\xa1\xb6\xc0\x4e\xeb\xc8\xf1\x87\x97\xdb\x75\x81\x99\xb5\x27\x03\xe1\x4b\xc1\xc7\x71\xd7\x99\x3b\x86\x75\x03\xc4\xd3\x4d\x5f\x5c\x55\xe7\xf9\xf4\x77\x23\xe5\x77\x10\xad\x1b\xb6\x9c\x55\x70\x74\x8b\xdf\x50\xd4\x51\x9b\x3b\xba\x45\x9f\x50\xe0\x50\x5b\x5a\x79\x8b\xbf\xda\x30\x3a\x89\x9f\x7b\xbd\x5e\x90\x7d\x54\x9d\xdb\x89\xf6\xfe\xc0\xaf\x92\xa6\x1d\x4a\xf1\x78\xdb\xe8\x25\xda\xfb\x63\xd1\xbe\x16\x0f\x85\x8e\x5e\x82\x4f\x3f\x72\x26\xd4\x89\xcf\xfb\x9b\xbb\x06\x8d\xe8\xe8\xe5\x85\xeb\x61\x46\x17\x8d\x3f\xae\x18\xa4\x3d\xf3\xd1\x47\xe5\x4f\x2b\xa6\xb0\xd1\xb8\x91\x97\xac\x85\x19\xfd\xcb\x66\x33\x97\x05\x97\xe9\xa5\x34\x37\x7f\xdc\xfc\x1d\x00\x00\xff\xff\x5d\x21\x61\xc9\xe3\xb3\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 46051, mode: os.FileMode(420), modTime: time.Unix(1601542743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
