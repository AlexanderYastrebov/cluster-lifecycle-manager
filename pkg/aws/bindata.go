// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5d\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x08\x3e\xef\x0a\x26\xf5\x61\x3b\xd7\xfe\x81\x5e\x7a\x2a\x0a\x83\x6b\x29\x5e\x01\x96\x62\x50\x4a\x90\xdd\x62\xff\x7b\xa1\x24\xd8\xb4\x11\xd5\x7d\xcc\x70\x48\x51\xc7\xa6\xf1\xbe\x3c\x93\xf3\x66\x38\x8f\x23\xfd\x79\x93\x24\x7f\xdf\x24\x49\x92\x6c\x9a\xae\x1f\x54\x77\xaa\x8f\xc3\xb7\x6b\xbd\xb9\x4d\x36\x4a\xa4\xf2\xe9\xa2\xf4\xb9\xde\x7c\x7a\xf9\x95\xc7\xdf\x7e\xff\x63\x73\x9b\xec\x5f\xff\xb3\xad\xdb\x7b\xfd\x6d\x73\x9b\x88\xf2\xf5\x27\xf5\x97\xfe\xa8\xfa\x63\xf7\xd8\x8e\xff\xc2\xa0\x1f\xea\xd7\xff\xd1\x0f\xf7\x5a\x9d\xc7\x1f\x76\x0f\x97\xcb\x4d\x92\xfc\xf8\xf4\xff\xc8\xb9\x11\xf9\x27\xd0\x4f\xe8\x4c\x3a\x87\x36\x01\xcb\xf7\xb8\xb9\x73\xd8\xb6\xae\x9a\x87\xf6\x3d\xe1\xf7\xb8\xee\xe9\x1a\xbf\xe8\xfc\x3d\xee\xde\x2d\xee\x69\x86\xef\xe4\x7b\x16\xe9\xce\x88\x7c\xa7\x2e\xfd\x14\xfa\x05\x2e\x49\x36\x55\xfd\xd8\x9c\xea\xfe\xed\x1b\x4c\x92\xcd\xf8\xc9\x63\xdf\x57\xff\xfd\xf4\xdb\xe7\x8f\x5d\x5d\x57\xfd\xb1\xe9\x9a\xa1\x51\x97\xe6\xbb\x1a\x9a\xfb\xee\x95\xe4\xf3\xaf\xfe\x00\x58\x61\x01\x43\xe4\x94\xfb\xe4\x94\xc1\x2a\x50\xd0\x58\x49\xbf\xac\x60\x85\xd9\x46\x45\x6b\x6f\xa4\x95\x4d\x02\xab\x8c\x8b\x16\x24\xca\x59\xba\x8b\x6b\x0f\x62\xda\xbb\x4b\x63\x62\x95\xb3\xe8\x05\x94\x54\x72\x9e\xa0\x06\xb1\x67\x22\x6f\x82\x6d\x15\x79\x20\x36\x47\x78\x80\xd0\x1c\x7b\x18\x82\x2e\x52\x61\xde\x69\xf9\x64\xab\x1d\x1c\x17\xa8\x23\xb6\x79\xb9\x77\xd3\x0a\x26\x77\x5c\x2b\x9e\x8a\x54\x9a\xf7\xf9\x61\xb2\xd7\xc4\xc1\x71\xc1\x38\x82\x87\x39\x14\x9c\x8a\x60\x87\x82\x53\x91\x1e\xc0\xe0\xde\xb9\x87\x0e\x71\x1e\x39\x15\x69\x5b\x0f\xea\x12\x64\x83\x85\x39\x91\x14\x15\x53\x4c\xa3\x09\xf9\xed\xc3\xbf\xce\xc7\xcf\xb2\x09\x26\xe4\xa2\xe2\x08\x59\xf4\xa8\xc5\xc8\x8a\x43\x0e\x16\x40\x8b\x43\x6a\x16\x40\xcb\xb5\x8c\x2d\x80\x92\x73\xa1\x0a\xce\xa9\xb3\xd0\x40\xf7\xca\xdf\xa1\x42\x25\x85\x7b\x68\x54\x4d\x72\x06\xda\x68\xc8\xbb\xaf\x63\x3b\x2c\x2e\x8b\x54\x9a\xeb\x77\x12\x34\x16\x3f\x62\x3b\x73\x76\xf8\x38\xf6\x49\x5a\xf4\x49\xa8\xa7\x6f\xaf\xdd\x3a\x2d\x60\x66\x72\xa6\x88\x59\x64\x5b\xa1\x92\xa8\x36\x94\x66\x6d\x80\x59\x95\x64\x56\x16\x8a\x5b\x49\x58\x77\x84\x34\x0b\x0f\xde\x09\xa7\xaf\x97\x1d\x33\xb4\x21\x42\xdf\x88\xf4\x10\xb3\x63\x86\x09\x57\x46\x96\x8e\xcc\x27\xaf\x3b\x91\x8a\xd2\xc8\xac\x9c\x50\x3b\xec\xcc\x99\x88\x26\x8a\x4c\x65\xcd\x1d\x6e\x64\x92\x63\xcc\x2f\x2d\x54\x3b\xc8\x11\xe6\x93\xd7\x19\x96\x7a\xaa\xe3\xe4\xd3\x1b\x3c\xdb\x94\x1c\xf1\xe4\xe5\x73\x86\x8b\x46\xbe\x37\x1f\x85\x3e\xde\x03\x3e\xe3\x36\x9e\x5d\x68\x83\xe0\x3c\xa5\x16\x06\xde\xf3\x64\x21\x04\xfc\xab\x45\xa6\x90\x05\x31\x53\xec\x7d\xe6\xc0\xaf\x70\xaa\x98\x69\x2a\x79\xd4\x1e\x3b\x5a\x68\x9c\x94\xc1\x0f\x05\x76\xbc\xd0\x10\x14\xd2\x46\x7c\x58\x8e\x71\x36\xc4\xfa\x39\x66\x62\x37\x61\x26\x88\xd7\x49\x1c\x94\xcf\x78\xc2\x68\xbc\x1d\xe4\xbc\xee\xc4\xc6\xe3\x41\xce\xeb\x4e\x6c\xf0\xba\x85\x5c\x65\x7a\x95\xfa\xc6\xdf\x31\xce\xab\xd6\x37\x6c\x15\x19\xba\x62\x4c\xe7\x82\x06\xbe\x89\x46\x55\x0e\x9f\xa7\x9d\x86\xab\x84\x0d\x6c\x3b\x36\x5c\xd5\x71\xe0\x66\x42\x03\xde\x45\x13\xb3\x2d\xf3\xa5\x6e\x43\x93\xe1\x3f\xb5\x7d\x0a\x41\xdc\x84\x9e\x25\x23\xa8\xc6\xb3\xd1\xaa\x3b\xfc\xf2\x53\xb6\xa7\xb9\xaa\x7e\xa3\xab\xee\xf0\xdb\x4d\xbb\x92\xe6\xad\xfa\xdd\x8a\x35\x6c\x6f\xce\x9c\xc1\x96\x78\xbb\xe4\x99\x56\x66\x4e\x60\x13\xed\xb0\xb1\x2f\x97\x10\x62\xe6\x32\x4a\x4e\x1d\x4a\x1b\x2b\x7c\x09\x0b\x86\x65\xb0\xc8\x56\x0b\x54\xfa\x78\x6e\xcd\xb4\xe0\x2c\x52\x54\xf7\xc3\x5b\x74\xd2\x89\x7e\x99\xdf\x67\x7b\xbf\x15\x69\xdf\xaa\xcb\xfb\xfa\x69\xc2\x2a\xaa\x79\xa6\x16\x9d\x0e\xa3\x1a\x31\x3e\x1b\x50\xed\x5c\x03\x6a\x2a\x15\x79\x1a\xbc\xc9\x6b\xc5\xcb\x5c\x37\x4d\xcb\x8b\x7d\x1a\xbc\xc9\x6b\xc5\xcb\x9c\x86\x27\x9b\x70\x97\x72\x9c\xfb\xb9\x68\xc1\xdd\x8c\x98\x06\xd0\x5a\xf0\x74\x4c\x4e\x59\x9e\x97\x6a\x95\x29\x0b\x3d\x1c\xc7\x34\xd8\xd9\xe6\xa9\xd8\x9a\x69\x6d\xa7\x05\xae\xeb\x49\xac\x11\x9d\xc7\x18\x05\xd1\x39\xcc\x4b\x10\x9a\xc5\x60\x04\xb1\x21\xcd\x71\x7d\xf9\xa0\x45\x67\xdf\x66\x0e\x52\x04\x64\x8b\xd1\x37\xe7\xd7\xb4\x47\x70\xea\x1e\xa7\x80\xc3\xdd\x21\xab\xbe\x17\x0a\x4e\x8a\x2f\x0a\x32\x31\xbc\x28\xd0\x54\x8b\x9d\x82\x4d\x88\x6c\x0a\x2c\x36\xfc\xc6\xb1\xc3\x48\x92\x42\x00\x56\x41\x25\x45\x05\xd5\x14\x15\x54\x54\x54\x38\x55\x51\x01\x65\x45\x85\xd4\x15\x15\x48\x58\x54\xb8\xf8\xae\x98\x02\x3c\x70\x3f\xfb\x99\x19\x4f\xf8\x06\xf6\xc2\x5e\x98\xb9\x97\x86\xd0\x5d\xed\x91\x16\x87\xec\x2c\x61\x23\xba\x56\x95\x25\xac\x95\x7b\xc5\x0a\xce\x6a\xb5\x5a\x58\x31\xd5\x51\xc1\xa5\x70\xb5\x1a\xbf\x4e\x89\x5f\xa9\xc2\x57\x3c\x35\xeb\x02\x78\xad\x2e\x71\x55\x1c\x67\xf8\x05\xa8\xc5\xea\xb2\xf1\x55\xe2\x39\x6b\xee\xc2\xd7\xc7\x5b\xa9\x57\xfc\x7a\xbb\xfb\xf1\xb5\x2b\x7a\x05\xdd\xea\x42\x33\x84\x1c\x74\x6c\xef\xca\x73\x93\x1b\x84\x0e\x37\xb4\x77\xcd\x2a\x8f\xb7\x1b\x7d\xa6\x10\x1d\xf6\x6e\x3e\xd7\x2c\x85\xf6\x78\x39\xdf\x37\xb1\x88\x1e\x13\x62\x47\x2c\xe8\xf5\x7c\x46\x5e\xab\x9c\x56\xd2\x16\x8e\xb9\xfb\x44\xa4\x61\xc7\xdc\x79\x22\xd2\xb8\x63\xee\x7e\x74\x5d\xcf\x3e\xad\xd6\x43\x16\xd4\xa0\x5f\x6f\x1b\xa2\x20\x76\xb0\xa9\x79\x6d\xe1\xda\x3b\xb7\x99\xb4\x85\x6b\x3f\x37\xe2\x43\x01\xe7\xa9\x7a\x50\x70\xf7\x63\x17\x20\x32\x1e\xe2\xee\x59\xc3\x11\xee\xda\x50\xd5\xa0\x6d\xef\xda\xe4\xd2\xa8\x6f\xcf\xb1\xc7\xdc\x4f\x1f\x60\xc0\x16\xbe\x3d\x83\xa8\x58\xf8\xf6\x0c\xaa\x62\xe1\xdb\x33\x2c\x39\xec\xdb\xbb\xd7\x15\xdc\xb7\x67\x10\x16\xdc\xb8\x67\x50\x16\xd0\xb8\x77\x2f\x2d\xa8\x73\xcf\x10\xe1\x16\x6e\x15\xb5\x9b\xe9\xb5\x67\x60\xe5\xdc\x53\xbb\x21\x3e\xfb\xb4\xda\xc2\xb9\x27\xfa\x1f\x3e\x3b\xb5\xda\xc6\xb9\x8f\xc9\x00\xd1\xb0\x75\x1f\x51\x5f\x5d\xe3\xde\x7d\x44\xd6\xa2\xb6\xf1\xee\xe3\x52\x43\x0b\xef\xde\xaa\x96\x0a\x2e\x86\xab\x55\xf9\x75\x8a\xfc\x5a\x35\x1e\x37\xef\xa9\x57\x63\x7c\xf3\x5a\x5f\xea\x42\xdd\xfb\xd8\xf4\x62\x75\xf9\x78\x10\x69\xdb\x9c\xf4\xfd\xaf\x46\x23\xb7\x69\x29\x32\x23\xab\x8f\x37\x54\x07\xf8\x51\x82\xce\xe7\xdd\x06\x19\x66\xe6\x6c\x90\xe0\x7b\x53\x5d\x37\xed\x47\x60\x64\x9d\x5d\xdb\x24\x83\x4c\x3b\xd5\x01\xdb\xcb\x75\xb7\x7e\x90\xd8\x03\x1d\x18\x76\x56\xa0\xa9\xc2\x01\x9f\x48\x77\xdc\xe3\x18\x40\xd3\xd6\x71\x2b\x6b\x98\x99\xeb\xe6\x7e\xb9\xda\x88\x6b\x88\xa5\x69\xc6\x76\x0e\x6b\x08\xa5\x09\xaa\xf3\xb7\xad\x0c\x99\x31\x92\xa6\x55\x97\x73\xd8\x30\xb3\x36\x43\x16\x6c\xa2\x6b\x84\x0e\x13\x49\x2a\x54\x28\xa9\x40\xb1\xa4\x42\x05\x93\x0a\x14\x4d\xa1\x46\xd7\x1e\x3e\x0b\x39\x7c\x11\xc6\x03\x41\x6e\x98\xd7\x90\xd2\xf9\x35\x91\x87\xcf\xa5\xc5\x5f\x50\xce\xbd\x1d\x92\xf2\x07\x1c\x2c\xfe\x80\x83\x74\x5e\x1b\x3c\xf9\x7c\x37\x8c\xd7\x0b\x48\x4f\x22\xcd\xcc\x6a\xfd\xd6\xdd\xf8\xd7\x30\x50\xc1\xf1\x08\x5e\x3e\x6e\x35\xbe\x6c\x74\x6e\x9e\xd7\xad\x86\xdf\x16\xc8\xf2\xf6\x1b\x4e\x62\xf8\x8e\xcc\x0e\xdb\x98\xae\x67\x8e\xe4\xe0\x17\x2d\x52\x1f\x4e\xee\x7d\xd9\xd0\xfe\x62\x6c\x0a\x59\xa3\xa9\x3f\xaa\x3b\xd0\xdf\xc5\x4a\xad\xa4\x91\xd8\xfa\x8c\x89\x91\xd5\x0a\x1f\x34\x3c\xd2\xf2\xf5\x9c\x61\xdf\xbc\xd6\xe6\x4b\x8c\x9c\x8c\x35\x78\xf4\x72\x11\xa5\x2f\x71\xf3\xd7\xcd\x3f\x01\x00\x00\xff\xff\x44\xe0\x9f\x7d\xc0\x8e\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 36544, mode: os.FileMode(420), modTime: time.Unix(1564149804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
