// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x9c\xc1\x6e\xeb\x36\x10\x45\xf7\xf9\x0a\xc1\xeb\x17\xc1\xa4\x28\xd9\xce\xb6\x3f\xd0\x4d\x57\x45\x51\xa8\x96\xe3\x08\x08\xfd\x0c\xc6\x2e\xf2\x5a\xf4\xdf\x0b\x39\x5d\x85\x74\xe7\x30\xb8\xcb\x00\xc1\x85\x34\x73\x38\x43\xde\xa1\xf5\xeb\x43\xd3\xfc\xfd\xd0\x34\x4d\xb3\x9a\x4f\x6f\x97\xf1\xb4\x3f\xfc\x7e\xf9\x71\x3e\xac\x9e\x9a\xd5\xe8\x5a\xff\xfe\x3a\xa6\xe3\x61\xf5\xed\xe3\x5f\xfe\xfc\xe9\xe7\x5f\x56\x4f\xcd\xf6\xbf\x3f\xe3\x21\x7e\x4f\x3f\x56\x4f\x8d\x1b\x1e\x9a\xe6\x9f\x6f\xff\xaf\x15\x8a\x5a\x6e\xf8\x2c\xd6\x79\x20\x56\x92\xf2\x9f\x95\x02\x10\x8a\x87\x69\xbe\xc6\xcf\x0f\xf5\x59\x89\x3c\x52\x3c\x5c\xc6\x57\xcd\xdb\x15\x23\x15\x3e\x4b\x6d\x2d\xa5\xfd\x9d\xd7\xcb\x02\xe5\xda\x0d\xd0\x62\x2c\xd8\x4a\x1d\xc6\xaa\x07\x5a\x18\xab\x35\x10\xdb\x16\xc5\xba\x2c\x60\x03\x11\x43\x8c\x76\xed\x86\xbc\x25\x23\x62\xd3\xda\x5a\x41\x18\xfd\xa0\x8c\x7e\xb8\x17\xfd\x4c\x0c\x44\x3f\x08\xa3\x1f\x84\xd1\xef\x5b\x57\x0e\x7f\xc8\xe2\xbf\x33\x8b\xea\xa2\x56\x8e\xd9\x26\x5f\xe2\xc1\xac\x86\xfb\xbe\xf5\xe5\x7c\xee\xb2\x14\xb8\x9d\x59\xc7\x16\x39\x55\xfb\xd8\xf7\xc2\xf6\xb1\xef\xdb\x1d\x24\x6d\x43\xc4\x34\xbd\x68\xdf\x17\x3b\xc8\x57\x43\xaf\x6a\x21\xfd\xa4\x25\x76\x12\x23\x3b\x89\x99\x9d\x94\xd0\x4e\x52\x6a\x27\x29\xb6\x93\x8c\xdb\x49\x09\xee\xa4\x23\xf7\x54\x81\x1a\x79\xb4\x13\x45\xc3\x3b\x22\x46\xd1\x08\xe8\xd1\x28\x1a\x64\x8d\x9e\x18\x1a\x7d\xeb\x41\xc3\x3b\x15\xe9\xf8\x72\x0a\x18\x1d\x6e\x0d\x7a\xf1\xde\x57\xec\xf7\x80\x5e\x72\x58\xcf\xdb\xa5\x6d\xf2\x14\xb7\xc1\xc4\x6d\xf2\x98\x36\xe7\xcd\x34\x4c\x77\xe3\x96\xa9\xb1\xf7\x64\x39\xed\x40\x0e\x9e\x5d\xeb\x86\xa2\xdc\x90\xe9\xed\x36\xe6\x52\x78\xe6\x27\x60\x3b\x6c\xcf\xfc\x08\x0c\xc2\x76\xc4\x78\xd8\xfb\xf8\x63\xcd\x42\x30\xc5\x3a\x9e\x82\xb0\x35\xcb\xf8\x91\x9f\xf0\x40\x0e\x8e\xfc\x88\x47\x72\xd0\xbd\x09\xd9\x3d\x86\xe9\xc4\xf7\x5a\xa0\x5c\x7e\x08\xd2\x5c\xf8\xde\x5c\x0e\x37\x41\x48\x9d\xbd\xa1\xb9\xa9\xd1\xdc\x0e\x76\x32\x16\x39\x9a\x5c\xe7\x6d\xf0\x16\x3d\xb6\xb1\xe9\xb6\xec\xe9\x60\xef\x32\xf3\xf0\x52\x51\xe5\x40\x5a\x5f\x70\x95\xb3\x93\xfa\xc2\x8b\x9c\x9d\xd2\x17\xde\x50\x41\x42\x5f\xde\xee\xc9\xb9\x4d\x26\xe7\x4c\x1b\x6b\x16\xf6\xe7\x59\xda\x9f\x67\x5e\xce\x41\x91\x9b\x95\xfd\x79\xd6\x36\x87\x19\x5b\x89\x20\x07\xd2\x46\x33\x4b\x1b\xcd\x0c\xcd\x44\x47\xb6\xe4\x73\x07\x77\xe4\xbd\x23\xaf\xa9\x84\xe3\x50\xd1\x00\x41\xd1\xbd\x09\x62\x7b\x60\x33\x00\xde\x0e\xb8\x01\xda\xe5\xed\xa6\xd6\x95\x99\xcb\x92\x61\x9f\xdb\x6e\x72\xe5\xc5\xe5\xf3\x26\x63\x6f\x1f\x6e\x7a\x0c\x3b\xf6\x6c\xac\x99\xd2\x34\x40\xee\xcc\xd7\x8c\x70\x98\x04\xdc\xdd\x48\xc7\x49\xc4\x76\x8e\xae\x7d\x8b\xe3\x6b\x36\x51\xca\x82\x6f\xcf\x6e\x22\x9d\x28\xd9\x47\x85\x78\xaf\xeb\xe5\x91\x0f\xad\x1d\xfb\x7b\x7d\x2f\x5f\x4d\xdb\xd6\x5c\x4f\xf1\x4e\xa7\xca\x79\xdd\xb4\x66\x3b\x88\xb8\xb5\xd8\xa3\x8d\x08\xcb\x37\x41\xac\x53\x22\x46\xab\x37\xe0\x22\xb4\x6e\x5d\x16\x5b\xe7\xe5\xc2\x8e\x58\x90\xee\x70\x23\x1e\x7a\x81\x7a\xc1\x87\x5e\x76\x0b\x88\x70\x4e\x65\x96\xc4\x48\x87\x54\x76\xad\x8e\x15\x33\x2a\xd0\x46\x16\x39\x65\x2a\x2b\x86\x54\x60\x8b\x10\xf1\x90\x0a\x90\xc1\x87\x54\x80\x8c\x5e\x79\xf6\x89\x70\x4a\x45\x84\x64\x67\xe2\x48\xa7\x54\x84\xd9\x51\x0c\xed\x28\xa6\x76\x14\x63\x3b\x2a\xb9\x1d\xa5\xe0\x8e\x5a\x72\x47\x19\xba\xa3\x92\xb7\x8a\xb9\x28\x03\xae\x62\x92\xc9\x08\xc1\xa3\x4c\x84\x08\x9f\x65\x22\x46\xe0\xf8\x91\x64\x95\x8e\x0c\x49\x5a\xd5\x59\x9d\xc4\x65\x44\x0d\x89\x94\x11\x2d\x22\x93\xb6\x8c\xe8\x80\xa3\xf3\x6e\x98\x00\x21\xbc\xda\xf9\xc1\x87\xa0\x16\xdf\x0a\x3f\x86\x85\x4f\x38\x90\xb8\xa9\x49\x09\x96\x0e\x24\x6e\x7a\x32\x86\x85\xb3\x8d\x9b\x9a\x8e\x62\x35\xc4\x6a\x86\xd5\x08\x4b\x09\xd6\x02\x2c\xe6\x57\x87\xaf\x94\x5e\x1d\xbc\x67\xcf\x59\x03\x3e\xe7\x99\x0f\x72\xc0\xb0\xe4\x4c\x07\x39\xf6\xac\xe4\xac\x1d\xe3\x9c\x85\x63\x9c\xb3\x74\xf0\x72\xee\x6a\x3a\x16\x48\x69\x12\xbe\x6a\x92\x4e\xac\x92\x34\x70\x49\x39\xb1\x4a\xca\x29\x53\xaa\xb0\x16\x01\xbb\x09\x5b\x8b\x20\xa1\xdc\x5a\x24\x09\xbd\x7b\xa1\xfe\x4b\x09\x85\x4e\x25\x4b\x28\x75\x2b\x51\x42\x2b\xfc\x4a\xd0\x0f\x52\x85\x5f\x09\x26\xa4\xa9\xc2\xaf\x24\xf5\x03\xfb\x95\x76\x7f\x4f\xdc\xaf\x04\xed\x3d\x71\xc3\x12\x6c\xb3\x12\x34\x2c\xed\x9e\x9c\xa8\x63\xc9\xa2\xaf\x1a\x3b\xa6\x1a\xc7\x12\x61\x5b\xe1\x58\x22\x6e\x2b\x1c\x4b\x14\x3a\xec\x58\x12\x72\xb9\x63\x89\xd0\xe5\x96\x25\x62\x17\x5a\x96\x04\x5e\xea\x59\x22\xe2\x2a\xdc\x2d\x86\x5c\x85\x1d\xc5\x18\xc1\x7e\x14\x82\x84\x1b\x52\x8c\x12\xe8\x21\xa1\xbc\x52\xe3\x87\x24\x56\x9d\xd7\x0a\xd7\x12\x95\x12\x35\x26\x52\x4a\xc4\x90\x70\xdb\x12\x95\x12\x21\x72\xd4\xb7\x84\x29\x10\xe2\xab\xbd\xf6\x95\xaa\x7c\x4b\x06\xb0\xf8\x14\x58\xe1\x5b\x22\x84\xb9\xed\xc3\x18\xe6\xc6\x0f\x83\x58\x76\x91\x2c\x71\xe7\x92\xe6\x41\xc7\xb1\x1a\x63\x35\xc5\x6a\x88\xa5\x0c\x8b\x11\x16\x13\x2c\x04\x58\xca\xaf\x0e\xdf\x8b\x6b\xe3\xbc\x4f\xdf\xad\x8b\x65\xeb\x76\x70\x9d\x29\x86\x2f\xc7\x83\x07\xf3\x22\xdb\xf8\xe2\xe1\xe7\x30\x4c\x5a\x17\x25\x12\x2b\xd3\xf1\xb9\xf8\xf6\x34\x9e\x40\xcc\x4d\x17\xe4\xe2\xd9\x75\x51\x12\x6e\x95\x1d\x7e\xe1\x77\x28\xed\xc7\x82\x86\xa2\x4d\xc1\x9d\x1b\x94\x5f\xa0\xa0\x2b\x52\x90\x17\x05\x20\x54\xa0\x20\xd3\x21\x14\x74\x45\x0a\xf2\x9a\x07\x84\x74\x14\x08\xef\x2a\x2d\x62\x2a\x0e\x46\x1d\x08\xa3\x8c\x84\x51\x87\xc2\x28\x63\x41\x77\x71\xea\xfa\xe8\xfc\xe5\x8f\xf2\xc7\x92\x42\x61\xc0\xeb\xbd\x6d\xc1\x5f\x1f\xdd\xb6\x46\x73\x1b\x6c\xce\xae\x8f\x3e\x54\x68\xfa\xd0\xdb\xbf\x26\xbe\x3e\x0e\x15\x92\x03\xf8\xfc\xc5\xf5\x71\x57\xa1\xb8\xf3\x76\x7e\xde\xb5\x3f\xa0\x7e\x77\x6d\x57\x5e\xfb\xce\x17\xa6\xf9\xbd\x99\x97\x77\x77\xe0\x0f\x48\x05\xe9\x67\x1d\xec\x84\x2c\x6a\xfc\x85\xbb\xdd\x1a\x29\xe2\x2f\x45\xd8\x6b\x65\x91\xa3\x1b\x63\x94\xdf\x03\x2d\x0d\xf6\xc0\xea\x2f\xa7\xf5\xb1\x16\x3d\xd9\x01\x65\x11\xd3\xfd\x56\x6b\x51\x13\xfe\x54\x6b\x91\x13\x9d\x4f\x16\xa9\x62\x3d\xf9\x6a\x06\x6a\xce\x27\x0f\xbf\x3d\xfc\x1b\x00\x00\xff\xff\x41\x7f\xb8\xcb\x91\x50\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 20625, mode: os.FileMode(420), modTime: time.Unix(1578056556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
