// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5d\x4f\x6f\xdb\xc6\x13\xbd\xfb\x53\x10\x3a\xc7\x84\x76\xf9\x47\x92\xaf\xbf\x2f\xf0\xbb\xf4\x54\x14\x01\x2b\xd3\xb2\x00\x53\x31\x56\x52\x90\xa4\xc8\x77\x2f\x68\x27\x4e\xe1\x5d\xb5\x6f\xdf\xcc\x88\xd2\xb1\x81\xcb\x79\xe2\xce\x1b\xce\x0c\xdf\x0c\x7f\xbf\x29\x8a\xbf\x6e\x8a\xa2\x28\x66\xdb\xdd\xfe\xd0\xed\xd6\xfd\xc7\xc3\xd7\xe7\x7e\x76\x57\xcc\x3a\x57\xfa\x2f\x4f\x5d\xd8\xf4\xb3\x0f\xaf\x7f\xf2\xf9\x7f\xff\xff\x6d\x76\x57\x2c\x7f\xfc\xe7\xd0\x0f\x9f\xc2\xd7\xd9\x5d\xe1\xda\x1f\xff\xb2\x3f\x7c\x0a\xdd\x66\xfc\xbf\x77\xc7\xa7\xa7\x9b\xa2\xf8\xfe\xe1\xdf\x0d\xd4\x49\x03\x6f\xd7\x7b\xb3\x50\x79\xd6\x42\xea\xfa\xfe\xfd\xe5\x6b\xf6\xea\x43\x7f\xbf\x3d\x0e\xef\xe1\xbf\xbf\x3c\x0d\x7e\xe8\x0f\xdd\x93\xe1\xcd\x49\xde\xfd\xfa\xfd\xf5\x97\xd4\xe5\xd7\x27\xee\x4e\x74\xf3\x5d\xb9\x88\x0c\xbc\x5e\xb4\x28\x66\xf7\xfd\xe7\xed\xba\xdf\xff\xba\xab\xe3\x9f\x6d\xbf\x8d\x7f\x53\x35\xf3\xb7\x7f\xda\x7d\x1e\xfa\x8f\xfb\xfd\xfd\xec\xae\x78\xe8\x9e\xf6\xfd\xcb\xbf\x7f\x07\x20\x62\x0e\x0e\x01\xac\xdf\x03\xac\xbd\x18\x60\x05\x53\xb0\x41\x20\xfa\xf7\x10\x97\x0a\x08\x61\x0e\xcf\x29\x88\xae\x55\xc0\xb8\x4c\x62\xac\x22\x5f\x6c\x39\x8c\x95\xc6\x49\x43\x91\xaa\x2a\x17\xdc\x49\xff\x3c\x0f\x09\x42\x2c\x5c\x2c\x4a\x0e\x61\x2d\xbe\x87\xb5\x80\x2d\x50\x48\xab\x25\xce\x0e\x5a\x38\xe1\xaa\x91\x85\x84\xab\x82\x16\x78\x47\x03\x0d\xf0\x7e\x02\x19\x68\x4a\x97\x3e\xe7\x3a\x3a\xe8\x15\x97\x99\x8c\x26\xd2\xe7\xb0\x88\x1f\x5f\x35\x97\x3d\xac\x9b\xd2\xa7\xbd\x69\x15\x9d\xb5\x5b\x71\x8f\xf8\xd1\x86\x69\x0a\xb7\x6e\xac\x53\xb8\x75\x53\xae\x40\x46\x2c\x68\x0b\x86\x49\xe2\xba\x49\x66\x71\xaa\x67\x6c\x9a\xc6\x35\xdd\x19\xe8\xd6\x95\xae\x4d\xda\x68\xa3\x9f\xe1\x3c\xff\x43\xce\x40\xb8\xce\x9c\x71\x9d\x3d\xe5\x3a\x3c\x61\x62\x59\xd1\xd9\x92\xae\x33\x26\xc5\xbd\x88\x14\x48\x3a\xb4\x9a\x27\xf3\xa1\x43\x38\xa2\xe9\xd0\x08\x52\xf2\x14\x3b\x1b\x4a\x11\x2d\x91\x4a\x4c\x07\x25\xcd\x6b\xa4\x9a\xf5\x1a\x10\x05\x81\x01\xc1\x58\x6b\x60\x14\x3c\xcd\x11\x8c\x2a\x47\x4d\x86\x26\x04\x5f\xba\x69\x91\x07\x8f\x4f\x28\xce\x46\x16\x36\xfa\x22\xb7\xd0\xc9\x01\xee\x32\x22\x23\x9d\x0a\xec\xd0\x90\xe1\x1d\x6d\x01\x65\x7c\xcd\xff\x08\x94\xb0\x74\xf2\xb7\xc3\xf8\xd6\x94\x9e\x2d\x18\x77\x49\xca\xe8\x9e\x35\xe6\xf1\x6e\xce\x56\xbd\xed\xc6\x3e\x0f\x1f\x6d\x98\xe7\xe1\xed\xc6\x3a\x45\x6e\x37\xe6\x29\x72\xbb\x31\x4f\x91\xdb\x8d\x69\x8a\xdc\x6e\x4c\xdf\x5e\xbc\x5e\x3f\x26\x9d\xae\x23\x99\x26\xf9\xed\xc6\x3e\xcb\x77\xf5\xcf\xa0\x46\x3f\xcc\x5e\x60\x4a\x58\x0b\xe1\x94\x67\x05\x23\x4e\xdb\x1c\xba\x5e\xd4\x0a\x18\x8d\x93\xe8\x95\x38\x03\x1c\x41\x0a\x82\x0f\x94\x62\xe9\x1c\xb7\x61\x1e\xed\xdc\x52\x01\x20\x1b\x01\xa1\x4c\x7f\xa5\x02\x90\x0d\xa1\x67\x64\xb5\x65\xb2\xef\xab\x85\x10\xe1\xda\x67\xbc\xfe\xc3\xde\x5d\x45\x35\xd3\x52\xfe\xf2\x2a\x38\x18\xa6\x27\x9b\x35\x4e\xfc\x9a\xf2\xde\xa3\x21\xbc\x8d\x6b\x9a\x04\xc4\x36\x3a\xee\x79\xda\x23\xf3\x30\xa2\x21\xdc\x79\x8c\xda\xd1\x9d\xd4\x81\x89\xbe\xea\x43\xcf\x3b\x72\x4b\x1d\x98\x18\xbd\x2b\x90\x3b\x95\x01\xc8\x07\x87\x67\x40\xab\x05\x94\x5c\xc4\x6d\x91\x34\xc5\xf1\x40\xf4\x80\xeb\xa9\x40\xb7\x8c\xf3\x1f\x39\x44\x94\x3a\xa0\x4f\xc6\xe9\x8f\xf4\x36\x6e\xe0\x10\x84\x69\x62\x22\x84\x62\xbd\xc9\x26\xe7\x81\x33\x51\x20\xdf\x54\x38\x63\xea\x25\x57\x40\x6d\x70\x6d\x50\xca\xe3\x41\x13\x92\x87\x26\x66\x62\x2f\x89\x80\x90\x89\xfa\x7e\x87\x57\x9a\x60\x5f\x57\xbf\x33\xfe\x0a\x13\xf5\x1a\xdf\x70\x45\x9c\x0e\x4c\x30\x44\x90\x35\x9c\x97\x16\xed\x2f\x18\x51\x72\x90\x35\x9c\x0e\x48\x94\x5e\x60\x09\x62\x74\xdc\xd8\x1b\x91\x6a\x39\xd1\x4b\xce\x17\x8c\x60\x83\x98\x63\x8d\x93\x1e\xf6\x63\x46\x0a\x05\x52\x7b\x69\x90\xe9\x3d\xc2\x49\x14\x4b\x6d\x15\x8c\xba\xd4\xb6\x28\x3f\x1e\xf1\x72\x13\xa4\xb6\x45\xf5\xf1\xb8\x3f\x05\x33\x91\x43\x38\x48\xa6\x6d\x52\x25\x6d\x95\xeb\xe2\x84\x50\x5b\x01\xa2\x72\x59\x1c\x77\x41\x34\x40\x2a\x37\x41\xa2\x20\xa4\x02\x52\xb7\x24\x8e\x82\x90\x02\x46\x61\x7e\x8f\xdc\x49\x79\xf7\x70\x0b\xcf\x37\x60\xb4\x31\xe8\x63\x6f\x65\x45\xcc\x79\xba\xb0\x5b\x59\x19\x84\x70\x5b\x05\x24\xf4\x3e\xc0\x25\x5f\xf4\x63\xfd\x0f\x61\x12\xb4\xad\xc0\x86\x7b\xe3\xa0\xa3\xb6\xa1\x8c\x71\xf0\x11\xbf\xa0\xda\x56\x7d\x46\x39\x0b\x26\xe5\x91\x43\x2e\x1a\xf9\xad\xec\x77\xb8\xf6\x70\xd1\x72\x51\x52\x0b\x27\x18\x27\xc9\x84\x52\x07\x64\x95\x8e\x94\x11\xc5\xb1\x97\xe5\x91\x67\x2a\xdd\xca\xf4\x73\xd1\xc7\xa5\x18\xd6\x68\x89\x6e\xa6\x12\x4c\x2c\x58\xd2\xe5\xa2\x06\x44\xac\xec\x9e\x98\x39\x60\xb8\x24\xcb\x45\x39\xc6\xdd\x83\xb3\x1f\x4c\x78\xb5\x62\x2a\xbb\x7a\x31\x81\x72\xab\xe6\x5a\xca\x2f\x36\x2c\x45\x3f\x03\x38\x31\x4e\x0f\x39\x8a\x3b\xf7\x03\x3a\x75\x8e\x8e\x8a\xc6\x69\x94\x53\xc0\xb8\x1f\xba\xa7\x68\x74\x3d\xf2\x34\x72\xf4\x5b\x3e\x13\x3c\xa0\x6e\x84\xbd\x44\x32\x98\xfd\x1e\x4e\xb5\x14\xe2\xd0\x55\x97\x5c\xf0\x5a\x8a\x27\xe8\x87\x53\x4d\x85\x38\x31\x59\x96\x5c\x6a\x22\x97\x56\x0c\x27\xea\xf5\xf8\x61\xba\x28\xb9\x32\x53\xe1\xb4\xe1\x4a\x98\x1c\xa3\x17\x4f\xfa\x0f\x60\xf9\x06\x46\xc6\x78\x9d\x83\x97\x03\xb4\x0e\x8c\x72\x84\x9a\x41\x47\x7f\x82\x7e\xa8\x4b\x37\x4f\x43\x9c\xc7\x59\x02\x37\x80\x3e\xda\x90\xbc\x68\x00\x6d\xf0\x6f\x09\x40\x03\x82\x16\x3f\x68\x01\xa2\x1b\x99\xe6\xa0\x43\xfa\x64\x2e\x38\x64\xcc\xe8\xb3\x29\xed\x68\xc3\xdc\x91\x32\x86\xf4\x53\x8d\x0c\xd4\x86\xad\xb3\xe2\x43\xfa\xac\xb3\x36\xa2\x97\x49\xa0\x09\x4b\x3e\xa0\x53\xfa\x82\x43\x36\x26\x5c\xc6\x98\x3e\xcf\xb8\x8c\x39\x7d\x9e\x72\x19\x73\xfa\xfc\x71\xc0\x73\xfa\x34\xe9\xf0\x39\x7d\x9a\x75\xf8\x9c\x3e\x4f\x3b\x70\x50\x9f\xbf\xbc\x35\x2f\x32\x86\x78\xd8\x8e\x9f\xb8\xab\xff\x0a\x53\x59\x7f\x11\x15\xa5\xad\x0a\x4c\x11\x39\x11\x98\x3a\x77\xd3\x56\x26\x52\xa9\x60\x34\x96\x89\xe8\x80\x54\x96\x89\x44\x28\x75\xbc\x92\x0c\x52\xd8\x6b\x07\x05\x7c\xb6\xea\x2f\x69\x37\x7f\xc8\x59\x68\x32\x61\x94\xbc\x8e\x20\x79\x1d\x31\xf2\x0a\x42\xe4\x35\x44\xc8\xab\x08\x90\x17\x1e\x1f\xd1\x95\x26\x93\xb2\xe5\xe2\x23\xb8\xfe\x0c\x81\x49\x08\xd7\x9f\x21\x30\x89\xe1\x19\xd2\x90\x29\xdd\xd2\x7a\xd4\x41\x23\x42\x6a\x8f\x3a\x98\x84\x71\xf5\x51\x07\x93\x38\x0e\xca\x42\x26\x0b\xe4\x92\x51\x0c\xac\x9e\x37\x9f\xa4\x90\x47\x62\x61\x20\xc6\xee\x83\x30\x8c\xa2\x46\xce\xd0\x8a\x93\x84\x30\xd4\x82\x79\x2b\x4e\x16\x3e\x50\x1b\xa6\xad\x38\x7b\xee\x0a\xa8\x0b\x19\xc8\xd9\x91\x45\x33\x2f\x67\x49\x16\xcd\x3c\x7c\x49\x16\x4b\x8a\x8c\x25\x59\x2c\x29\x32\x96\x64\xd1\xa4\x40\xb7\x64\xf1\x97\xc7\x44\x05\xfc\x2d\xc2\x14\xe7\x12\x4f\xb2\x26\xdd\x19\x7a\x47\xf2\x3d\x59\x43\xd6\x9e\x2c\xb0\xf2\x30\x98\xe5\x18\x32\xf6\x64\xb1\x7b\x5c\xa5\x7b\xb2\x86\x9c\x3d\x59\xe4\xf8\xb2\x78\x0c\x61\xc8\xd9\x93\xc5\x8e\x2f\x2b\x9d\xb7\x61\x52\x2f\x5e\x94\x35\xe0\x8b\xb2\xc8\x95\xb8\xc2\x45\x59\x03\xbe\x28\x6b\x62\x5a\x9b\x16\x2e\xe2\x4d\x59\xcf\x1e\x8f\x8f\x0b\x32\xed\x78\xc6\x07\x3c\xd9\xb5\x23\xcf\xe8\x78\x66\x62\xa6\x10\xba\xfe\x19\x56\xa7\x3c\x4b\x06\x23\x41\x03\xd6\x8b\x53\x9e\xab\x9c\x1e\x1a\x38\x24\xa2\xdf\x91\x0c\xe6\x33\xa8\x62\xb1\x7a\x50\x9f\x41\x4d\xa8\x6f\x15\x40\x5a\xef\xaf\x53\x01\x69\x3c\x83\x2a\x96\x31\x07\xf3\x01\x4f\xb1\x14\x3c\x64\x48\x78\xd9\x08\x18\x60\x09\x2f\x19\x01\x03\x2e\xe1\x65\xb7\x53\x85\x93\x5f\xf3\x52\x0b\xb2\x01\x94\x09\xa7\x1d\x1a\xb4\x60\xbc\xfe\x2a\x64\x88\x85\xd9\xde\x53\xc8\x10\x0b\xa7\x86\xbb\x41\x1b\xa2\xc7\x1d\x6a\x83\x9e\x04\x06\x0d\xe0\xb4\xa0\x7f\x03\x4c\x0b\xb2\xeb\x11\x40\xb5\x30\xd9\xf3\x08\xa8\x5c\x58\x70\xcc\xf4\xd8\x2a\x76\xfd\x0c\xb9\x30\xcf\xb9\x0c\xb9\x30\x4f\xba\x0c\xb9\x30\x7f\x1c\xb0\x5c\x98\xa6\x1d\x2e\x17\xe6\x79\x87\xeb\x85\x79\xe2\x81\x7a\x61\x9a\x79\xa8\x60\x98\x67\x46\x46\x3b\x73\xb2\x8d\x72\x21\x4b\x30\x0c\xae\x2b\xd1\xd7\x51\x84\x2c\xc1\x30\x58\x03\xea\xeb\x28\x42\x86\x60\x98\x6c\x67\x8a\x25\x0a\x21\x47\x30\xcc\x4a\x14\x74\x50\x4a\x82\xcc\x59\x84\x14\x01\x56\x0c\x93\xbd\x38\xa9\x92\x22\xe0\x92\x61\xf2\x1d\x80\x58\xe6\x10\x72\x24\xc3\x13\xc6\xc9\xeb\x08\x93\xd7\x11\x25\xaf\x20\x48\x5e\x45\x8c\xbc\x8a\x10\x79\xe9\x11\x12\x15\x0d\x4f\xca\x97\x8b\x8f\xe1\xfa\x9b\xda\x4c\x82\x78\x86\xda\x6d\xca\x28\xae\xff\xc2\xc3\xc4\x2d\x95\xd7\xc9\x99\xc4\x71\x5c\xb3\x37\x65\x20\xc7\x65\x7f\x53\x46\x72\xdb\x65\x72\x0a\xa1\x5c\xb2\x4a\x0e\xab\xea\x61\xd9\xf0\x74\xb1\x58\x18\x8a\xb1\xfb\x20\x0c\xa4\xa8\x91\x33\xb4\xe4\x24\x41\x0c\xb5\x60\xdf\x92\x93\x05\x10\xd4\x86\x6d\x4b\xce\x9e\xbd\x02\xf2\x42\x06\x72\x84\xc3\x34\xf7\x72\x84\xc3\x34\xf7\x70\xe1\x30\x4b\x8b\x0c\xe1\x30\x4d\x8b\x0c\xe5\x30\x4d\x0b\x54\x39\xcc\xd2\x02\x96\x0e\xf3\xf7\x88\x5f\x56\x8d\x5a\xb0\xa6\xdd\x19\x7a\x48\x72\xe9\x70\xc8\x92\x0e\x83\xf5\x87\x81\xc6\x30\x64\x48\x87\xc9\xcc\x5e\x2c\x1d\x0e\x39\xd2\x61\xfa\xa3\x42\xe2\x64\x2c\x47\x3b\xcc\x7e\xe9\x4a\xe9\xc0\x2d\x53\x7b\xb1\x78\x38\xe0\xe2\x61\xee\xa8\xa5\xe2\xe1\x80\x8b\x87\x27\x26\xb6\x69\xf9\x22\x16\x0f\x1f\x5c\x39\x6c\xd7\xe1\xd3\x7f\x9d\xf2\xbc\x6c\x5d\x45\x3d\x2d\x0e\xf0\x37\x76\xc8\xc7\xd1\xc1\x5b\x8e\x12\x1d\x7c\x9a\x07\xb1\xee\x99\xbe\x3c\x72\xff\x39\xb1\xdc\xc1\x97\xbb\x6e\x07\x1c\x2e\xa7\x00\x3b\x78\x6c\x5f\x34\x7d\xae\xa6\x13\x50\x07\x7c\x77\x2f\xf9\x03\x40\xd5\x2a\xe9\x98\x27\xf6\xe6\x6a\x39\x66\x95\x74\xcc\xf8\x09\xc5\x5e\x3d\xe1\x98\xd1\xc5\x69\xc7\xac\x92\x8e\x19\xa7\x00\xec\xd5\x8d\x1d\xd3\x7a\xcb\xe1\x68\xc1\xd4\x35\x3b\x63\xdf\xec\x6c\x9d\xb3\x33\xf6\xce\xce\xd6\x3d\x8d\x97\x33\x1e\x6f\x9d\x3f\xfc\xe9\x92\xe9\x57\x9d\x98\x1d\xf5\x9e\x14\x93\x1f\x6f\xdd\x32\xc7\xd0\xb2\x26\xf9\x70\xbc\xf5\x75\x86\x21\x5f\x37\x89\xaf\x91\x63\x86\xda\x0c\x3b\xad\x23\xe5\xe5\xc7\xdb\x55\x86\x99\x95\x27\x1d\xe1\x8b\xfe\xf7\xdb\x13\xd5\x96\x78\x7a\xe4\x8b\x2b\xab\x74\x3c\xfd\x55\xa8\xfe\x63\xd2\xb9\x61\xcb\x05\x05\xa0\x3d\x7e\x43\x51\xa0\x36\x77\xb4\x47\x9f\x50\xec\x07\xe7\xbd\x78\x2b\xfe\x08\x12\x3f\xf7\x6a\x35\x27\xfb\x54\x3a\xb7\x13\xed\xad\x80\x5f\x7d\x8c\x3b\x40\xe2\xf1\xa1\x11\x25\xda\x5b\x61\xd9\xbe\x12\x0f\xdd\x8d\x28\xc1\xa7\x1f\x39\x73\x27\xff\x8a\xff\x37\x77\x0d\x1a\xbc\x11\xe5\x85\xeb\x0d\x46\x88\xc6\x1f\xaf\xab\xa5\x3d\xc9\x11\xa3\xf2\xa7\xeb\xf4\xbf\xc6\x3e\x82\xbc\x64\xad\xc1\x88\x2f\x99\xcd\x5c\x16\x5d\xa6\x97\x2a\xdc\xfc\x71\xf3\x77\x00\x00\x00\xff\xff\x97\x5b\x06\x64\x1d\xac\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 44061, mode: os.FileMode(420), modTime: time.Unix(1597138219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
